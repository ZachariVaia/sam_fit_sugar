FROM nvidia/cuda:11.8.0-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV PATH="/opt/conda/bin:${PATH}"
ENV TORCH_CUDA_ARCH_LIST="6.0;6.1;7.0;7.5;8.0;8.6+PTX"



# System dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git wget build-essential cmake ninja-build g++ \
    libglew-dev libassimp-dev libboost-all-dev libgtk-3-dev libopencv-dev \
    libglfw3-dev libavdevice-dev libavcodec-dev libeigen3-dev libxxf86vm-dev \
    libembree-dev libtbb-dev ca-certificates ffmpeg curl python3-pip python3-dev \
    libgl1-mesa-glx libegl1-mesa libegl1 libxrandr2 libxinerama1 libxcursor1 libxi6 libxxf86vm1 \
    libglu1-mesa xvfb mesa-utils \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Miniconda
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh \
    && bash miniconda.sh -b -p /opt/conda && rm miniconda.sh

WORKDIR /app

# Clone SuGaR repo
RUN git clone https://github.com/Anttwo/SuGaR.git --recursive .

SHELL ["/bin/bash", "-c"]

# Conda + install env
RUN /opt/conda/bin/conda tos accept --channel https://repo.anaconda.com/pkgs/main && \
    /opt/conda/bin/conda tos accept --channel https://repo.anaconda.com/pkgs/r && \
    source /opt/conda/etc/profile.d/conda.sh && \
    python install.py
    

    
# Remove conda's ancient Node.js to avoid conflict
RUN source /opt/conda/etc/profile.d/conda.sh && \
    conda activate sugar && \
    conda remove -y nodejs || true


# Fix symlinks
RUN ln -sf /app/gaussian_splatting/submodules/diff-gaussian-rasterization/diff_gaussian_rasterization /app/gaussian_splatting/ && \
    ln -sf /app/gaussian_splatting/submodules/simple-knn/simple_knn /app/gaussian_splatting/

# Node.js 20 + npm 10
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@10

# Create helper script for xvfb
RUN printf '#!/bin/bash\nxvfb-run -a -s "-screen 0 1280x1024x24" "$@"\n' > /app/run_with_xvfb.sh && \
    chmod +x /app/run_with_xvfb.sh

# Entrypoint
RUN printf '#!/bin/bash\nsource /opt/conda/etc/profile.d/conda.sh\nconda activate sugar\nexec "$@"\n' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]

# --- Install viewer dependencies ---
WORKDIR /app/sugar_viewer
RUN npm install --legacy-peer-deps && npm install -g vite
WORKDIR /app


# -------------------------------------------------------------------# -------------------------------------------------------------------
# COLMAP (CUDA, headless) deps
# -------------------------------------------------------------------
RUN apt-get update && apt-get install -y --no-install-recommends \
    libfreeimage-dev libmetis-dev libsqlite3-dev libgoogle-glog-dev libgflags-dev \
    libsuitesparse-dev libflann-dev qtbase5-dev libqt5opengl5-dev libceres-dev \
    libcgal-dev libgmp-dev libmpfr-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /opt
RUN git clone --recursive https://github.com/colmap/colmap.git && \
    cmake -S colmap -B colmap/build -GNinja \
      -DCMAKE_BUILD_TYPE=Release \
      -DCUDA_ENABLED=ON \
      -DGUI_ENABLED=OFF \
      -DTESTS_ENABLED=OFF \
      -DCMAKE_CUDA_ARCHITECTURES="60;61;70;75;80;86" && \
    cmake --build colmap/build --target install && \
    rm -rf /opt/colmap



# Back to app
WORKDIR /app

# Default = training mode (bash)
CMD ["bash"]

